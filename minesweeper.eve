# Minesweeper

## Program

Set some constants and generate the grid cells to hold the board state.
```
match
  [#session-connect]
  width = 5
  height = 5
  area = width * height
  mines = 3
  seed = floor[value: area * 0.2]
  cell-size = 30

  i = range[from: 0, to: width]
  j = range[from: 0, to: height]
commit
  [@board width height area cell-size seed mines unplaced-mines: mines]
  [#cell row: i column: j]
```
Place the mines. This is structured as a loop and has an iterative random
number generator inlined. Random number generation in the standard library
would significantly simplify this clause. To avoid excessive thrashing the
other clauses in this program are guarded from running until this is complete.
```
match
  board = [@board width height area seed unplaced-mines unplaced-mines > 0]
  noise-1 = sin[angle: (seed * 12.9898) / 360] * 43758.5453
  noise-2 = abs[value: noise-1 - floor[value: noise-1]] // 0..1
  next-seed-1 = floor[value: noise-2 * 15485863]
  next-seed-2 = if next-seed-1 = seed then next-seed-1
                else next-seed-1 + 1
  cell-number = floor[value: noise-2 * area]
  column = mod[value: cell-number by: width]
  row = floor[value: cell-number / height]
  cell = [#cell row column]
  dec-unplaced = if cell = [#has-mine] then 0
                 else 1
commit
  cell += #has-mine
  board.seed := next-seed-2
  board.unplaced-mines := unplaced-mines - dec-unplaced
```
Make each cell keep track of its neighbors.
```
match
  board = [@board unplaced-mines: 0 not(#initialised)]
  this-cell = [#cell row: this-row column: this-column]
  i = range[from: -1, to: 2]
  j = range[from: -1, to: 2]
  this-neighbor = [#cell row: this-row + i column: this-column + j]
  not(this-cell = this-neighbor)
commit
  board += #initialised
  this-cell.neighbor += this-neighbor
```
Count how many neighbors with mines each cell has. Note that this doesn't tag
0.
```
match
  [@board #initialised]
  this-cell = [#cell not(#has-mine) neighbor: mine-neighbor]
  mine-neighbor = [#has-mine]
bind
  this-cell.neighbor-mines := count[given: mine-neighbor per: this-cell]
```
Make the revealed cells.
```
match
  [@board #initialised width cell-size]
  cell = [#cell row column #revealed]
  revealed-contents =
    if cell = [#has-mine] then "x"
    else if cell.neighbor-mines then "{{cell.neighbor-mines}}"
    else "."
bind
  cell.elem :=
    [#div cell sort: row * width + column text: revealed-contents style:
     [display: "inline-block"
      width: "{{cell-size}}px"
      height: "{{cell-size}}px"
      border: "1px solid black"
      background: "white"
      font-size: "2em"
      line-height: "{{cell-size}}px"
      text-align: "center"]]
```
Make the unrevealed cells.
```
match
  board = [@board #initialised width cell-size]
  cell = [#cell row column not(#revealed)]
bind
  cell.elem :=
    [#button cell sort: row * width + column style:
     [display: "inline-block"
      width: "{{cell-size}}px"
      height: "{{cell-size}}px"
      line-height: "{{cell-size}}px"]]
```
Draw the board. This could definitely benefit from a separate style sheet.
```
match
  board = [@board #initialised unplaced-mines: 0 width cell-size]
  cell = [#cell row column elem]
  container-width = cell-size * width
  container-height = cell-size * width
  big-font-size = container-width / 6
  font-size = cell-size * 0.5
  game-over-text =
    if board = [#won] then "YOU WIN"
    else if board = [#lost] then "GAME OVER"
    else ""
bind
  [#div board @container style:
    [position: "relative"
     font-size: "{{big-font-size}}px"
     text-align: "center"
     width: "{{container-width}}px"
     line-height: "{{container-height}}px"
     color: "red"]
    children:
      [#div sort: 0
        text: game-over-text style:
        [position: "absolute"
         left: 0
         top: 0
         z-index: 1
         width: "{{container-width}}px"]]
      [#div sort: 1
        style:
        [color: "black"
         font-size: "{{font-size}}px"
         width: "{{container-width}}px"
         position: "absolute"
         left: 0
         top: 0]
       children:
        [#span class: "wrap" sort: elem.sort children: elem]]
```
Clicking reveals a cell.
```
match
  [#click #direct-target element: [#button cell]]
commit
  cell += #revealed
```
A revealed cell with no neighbor mines reveals all neighbor cells.
```
match
  [@board #initialised]
  this-cell = [#cell #revealed row: this-row column: this-column
               not(neighbor-mines) not(#has-mine)
               neighbor: to-reveal]
bind
  to-reveal += #revealed
```
If a mine is revealed that's game over.
```
match
  board = [@board #initialised]
  [#cell #has-mine #revealed]
bind
  board += #game-over
  board += #lost
```
If only mines are unrevealed that's a win.
```
match
  board = [@board area #initialised]
  not([#cell #has-mine #revealed])
  cells-completed = count[given: [#cell #revealed]] +
                    count[given: [#cell #has-mine]]
  cells-completed = area
bind
  board += #game-over
  board += #won
```
Clicking restarts the game. This doesn't work currently and instead just
removes everything. I think this might be a bug in Eve.
```
match
  board = [@board mines #game-over]
  [#click]
  cell = [#cell]
commit
  board.unplaced-mines := mines
  cell -= #has-mine
  cell -= #revealed
```

## Todo

 * Marking mines/question marks - just as soon as there's a way to detect
   right-click in Eve again
 * Use random function from the standard library
 * Fix restart
 * Use external style sheet
 * Configuration dialog
 * Restart button
 * Smiley / frowny / O-face
 * Other touches to get that mid nineties look n' feel
