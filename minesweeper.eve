# Minesweeper
This is a version of [Minesweeper](http://www.minesweeper.info/wiki/Windows_Minesweeper) written in [Eve](http://witheve.com/).
## Setup
Here we set up a #game and #board and initialise a grid of #cell entities which
may or may not be tagged #has-mine.
### Setup #game and #board
```
search
  difficulty = [#difficulty name: "Beginner" width height mines]
  cell-size = 16
commit
  [#game screen: "board" rnd-cnt: 0 cell-size board: [#board width height mines difficulty]]
```
### Setup grid of #cell entities
If there aren't any cells, generate them for the current board.
```
search @event @session
  [#game board]
  board = [#board width height]
  row = range[from: 0, to: height - 1]
  column = range[from: 0, to: width - 1]
bind
  [#cell row column]
  board += #cells-initialised
```
### Set unplaced-mines on new board
For boards that don't have unplaced-mines, set it from mines
```
search @event @session
  not([#restart-game])
  board = [#board mines not(unplaced-mines)]
commit
  board.unplaced-mines := mines
```
### Place mines
Place the mines. This is structured as a loop and will mark pick an random
unrevealed cell without a mine each iteration.
```
search
  game = [#game screen: "board" rnd-cnt board]
  board = [#board unplaced-mines unplaced-mines > 0 #started]
  cell = [#cell row column]
  not(cell = [#has-mine])
  not(cell = [#revealed])
  ix = sort[value: cell direction: "up"]
  ix = floor[value: random[seed: rnd-cnt] * count[given: cell]] + 1
commit
  cell += #has-mine
  game.rnd-cnt := rnd-cnt + 1
  board.unplaced-mines := unplaced-mines - 1
```
### Track neighbors
Make each cell keep track of its neighbors.
```
search
  [#game board]
  board = [#board unplaced-mines: 0 not(#initialised) #started]
  this-cell = [#cell row: this-row column: this-column]
  i = range[from: -1, to: 1]
  j = range[from: -1, to: 1]
  this-neighbor = [#cell row: this-row + i column: this-column + j]
  not(this-cell = this-neighbor)
commit
  board += #initialised
  this-cell.neighbor += this-neighbor
```
### Count neighbors
Count how many neighbors with mines each cell has. Note that this doesn't tag
0.
```
search
  [#game board]
  board = [#board #initialised]
  this-cell = [#cell not(#has-mine) neighbor: mine-neighbor]
  mine-neighbor = [#has-mine]
bind
  this-cell.neighbor-mines := count[given: mine-neighbor per: this-cell]
  board += #neighbors-initialised
```
### Define number colours
```
commit
  [#color-templ index: 1 color: "rgb(0, 0, 255)"]
  [#color-templ index: 2 color: "rgb(0, 128, 0)"]
  [#color-templ index: 3 color: "rgb(255, 0, 0)"]
  [#color-templ index: 4 color: "rgb(0, 0, 128)"]
  [#color-templ index: 5 color: "rgb(128, 0, 0)"]
  [#color-templ index: 6 color: "rgb(0, 128, 128)"]
  [#color-templ index: 7 color: "rgb(128, 128, 128)"]
  [#color-templ index: 8 color: "rgb(0, 0, 0)"]
```
### Track shift keydown state
```
commit
  [#track-key-state key: 16]
```
### Define difficulty settings
```
commit
  [#difficulty sort: 1 width:  9 height:  9 mines: 10 name: "Beginner"]
  [#difficulty sort: 2 width: 16 height: 16 mines: 40 name: "Intermediate"]
  [#difficulty sort: 3 width: 30 height: 16 mines: 99 name: "Expert"]
  [#difficulty sort: 4 name: "Custom"]
```
## Status and control panel
### Drawing
```
search @browser @event @session
  [#game cell-size screen: "board" board: [#board mines width]]
  num-flagged = if count[given: [#cell #flagged]] then count[given: [#cell #flagged]]
                else 0
  remaining-mines = mines - num-flagged
  board-container = [#board-container]
  status-face = if board = [#won] then "ðŸ˜Ž"
                else if board = [#lost] then "ðŸ’€"
                else if [#click] then "ðŸ˜®"
                else "ðŸ™‚"
  container-width = cell-size * width
  min-width = if container-width < 200 then 200
              else container-width
  [#effective-click-mode mode]
bind @browser
  board-container.children +=
    [#div sort: 1 class: "status-panel inset" style: [padding: "5px" min-width: "{{min-width}}px" margin: "5px" margin-bottom: "0"] children:
      [#span #unmarked-mines class: "inset meter" text: "{{remaining-mines}}"]
      [#button #settings-button class: "outset big-btn" text: "âš™"]
      [#button #reset-button class: "outset big-btn" text: status-face]
      [#button #click-mode-button class: "outset big-btn" text: mode.indicator]
      [#span #time-elapsed class: "inset meter" text: "127"]]
```
### Settings button
```
search @session @event @browser
  [#click element: [#settings-button]]
  game = [#game]
commit
  game.screen := "settings"
```
### Reset button
```
search @event @browser
  [#click element: [#reset-button]]
bind @event
  [#restart-game]
```
### Mode button
```
search @session @event @browser
  [#click element: [#click-mode-button]]
  locked-mode = [#locked-click-mode mode]
commit
  locked-mode.mode := mode.next
```
### Game controls: Track the click mode
```
commit
  uncover = [#click-mode name: "reveal" indicator: "ðŸš¶" | next: mark]
  mark = [#click-mode name: "flag" indicator: "ðŸš©" | next: uncover]
  [#locked-click-mode mode: uncover]
```
```
search
  [#locked-click-mode mode: locked-mode]
  other-mode = [#click-mode]
  not(other-mode = locked-mode)
  mode = if [#keypressed key: 16] then other-mode
         else locked-mode
bind
  [#effective-click-mode mode]
```
## Grid drawing
### Draw board container
Draw the board.
```
search @session @event
  not([#restart-game])
  [#game cell-size screen: "board" board: [#board width #cells-initialised]]
  cell = [#cell row]
  font-size = cell-size * 0.5
  container-width = cell-size * width
bind @browser
  [#div #board-container class: "outset board-container"
    children:
      [#div class: "inset" sort: 3
        style: [font-size: "{{font-size}}px" display: "inline-block" margin: "5px" box-sizing: "content-box" width: "{{container-width}}px"]
       children:
         [#div #row-div sort: row style: [display: "inline-block"]]]]
```
### Draw revealed cells.
```
search @browser @session @event
  not([#restart-game])
  [#game board cell-size]
  board = [#board width #neighbors-initialised #cells-initialised]
  inner-cell-size = cell-size - 1
  cell = [#cell row column #revealed]
  row-div = [#div #row-div sort: row]
  revealed-contents =
    if cell = [#has-mine] then "ðŸ’£"
    else if cell.neighbor-mines then "{{cell.neighbor-mines}}"
    else ""
  background =
    if cell = [#has-mine #clicked] then "red"
    else "silver"
  color = if [#color-templ index: cell.neighbor-mines color] then color
          else "black"
bind @browser
  row-div.children +=
    [#div #cell-div cell text: revealed-contents sort: column class: "flat" style:
     [display: "inline-block"
      width: "{{cell-size}}px"
      height: "{{cell-size}}px"
      font-size: "1.7em"
      line-height: "{{inner-cell-size}}px"
      text-align: "center"
      box-sizing: "border-box"
      vertical-align: "top"
      background color]]
```
### Draw unrevealed cells.
```
search @browser @session @event
  not([#restart-game])
  [#game board cell-size]
  board = [#board width #cells-initialised]
  inner-cell-size = cell-size - 4
  x = if board = [#initialised] then board
      if board = [not(#started)] then board
  cell = [#cell row column not(#revealed)]
  row-div = [#div #row-div sort: row]
  text = if cell = [#flagged] then "ðŸš©"
         else ""
bind @browser
  row-div.children +=
    [#button #cell-button cell text sort: column class: "outset" style:
     [display: "inline-block"
      width: "{{cell-size}}px"
      height: "{{cell-size}}px"
      line-height: "{{inner-cell-size}}px"
      font-size: "11px"
      vertical-align: "top"
      padding: 0]]
```
## Interaction with cells
### First click
The first click on a game initiates it. This triggers the placement of mines.
```
search @event @browser @session
  [#click element: [#cell-button cell]]
  [#game board]
  board = [#board #cells-initialised not(#started) not(#game-over)]
commit
  board += #started
```
### Reveal cell
Clicking in reveal mode reveals a cell.
```
search @event @browser @session
  [#game board]
  board = [#board not(#game-over)]
  [#effective-click-mode mode: [#click-mode name: "reveal"]]
  [#click element: [#cell-button cell]]
commit
  cell += #revealed
  cell += #clicked
  cell -= #flagged
```
### Flood reveal
A revealed cell with no neighbor mines reveals all neighbor cells.
```
search
  [#game board]
  board = [#board #neighbors-initialised]
  this-cell = [#cell #revealed row: this-row column: this-column
               not(neighbor-mines) not(#has-mine)
               neighbor: to-reveal]
bind
  to-reveal += #revealed
  to-reveal -= #flagged
```
### Flag cell
Clicking in flag mode flags a cell.
```
search @event @browser @session
  [#game board]
  board = [#board not(#game-over)]
  [#effective-click-mode mode: [#click-mode name: "flag"]]
  [#click element: [#cell-button cell]]
bind
  [#toggle-tag on: cell tag': "flagged"]
```
### Chording
Clicking a revealed "number of neighbors" cell with the correct amount of flags
reveals all unflagged adjacent cells.
```
search @event @browser @session
  [#click element: [#cell-div cell]]
  cell = [#cell neighbor: mine-neighbors]
  mine-neighbors = [#cell #has-mine]
  cell = [#cell neighbor: flagged-neighbor]
  flagged-neighbor = [#cell #flagged]
  cell = [#cell neighbor: unflagged-neighbor]
  unflagged-neighbor = [#cell not(#flagged)]
  count[given: mine-neighbors per: cell] = count[given: flagged-neighbor per: cell]
commit
  unflagged-neighbor += #revealed
```
## Game end/restart
### Lose condition
If a mine is revealed that's game over.
```
search
  [#game board]
  board = [#board #neighbors-initialised]
  [#cell #has-mine #revealed]
bind
  board += #game-over
  board += #lost
```
### On lose: show mines
The locations of the mines are revealed in lost games.
```
search
  [#game board: [#board #game-over #lost]]
  cell = [#cell #has-mine]
commit
  cell += #revealed
```
### Win condition
If all mines are flagged that's a win
```
search
  board = [#board mines #initialised]
  not([#cell #has-mine #revealed])
  cells-completed = count[given: [#cell #has-mine #flagged]]
  mines = cells-completed
bind
  board += #game-over
  board += #won
```
### Clicking restarts the game
Clicking restarts the game.
```
search @event @session
  board = [#board #game-over]
  [#click]
bind @event
  [#restart-game]
```
### Restarting
This is also triggered by clicking the restart
button and by applying the settings.
```
search @event @session
  [#restart-game]
  cell = [#cell]
commit
  cell -= #flagged
  cell -= #revealed
  cell -= #clicked
  cell -= #has-mine
```
```
search @event @session
  [#restart-game]
  game = [#game board]
commit
  board -= #game-over
  board -= #won
  board -= #lost
  board -= #started
  board -= #initialised
  board -= #neighbors-initialised
  board.unplaced-mines := board.mines
```
## Settings screen
### Draw settings panel
```
search
  [#game screen: "settings"]
bind @browser
  settings = [#div class: "settings" children:
    [#fieldset sort: 1 class: "difficulties-container" children: [#legend text: "Difficulties"]]
    [#div sort: 3 class: "button-group"
      children:
        [#button #apply-button text: "New game"]
        [#button text: "Resume"]]]
```
### Draw difficulties
```
search @session @browser
  [#game screen: "settings"]
  difficulty = [#difficulty name sort]
  container = [#fieldset class: "difficulties-container"]
bind @browser
  container.children += [#div sort children:
    [#input difficulty id: "difficulty-{{sort}}" name: "difficulty" type: "radio"]
    [#label text: name for: "difficulty-{{sort}}"]]
```
### Set initial difficulty selection
```
search @session @browser
  not([#difficulty-changed])
  [#game screen: "settings" board: [difficulty]]
  input = [#input difficulty]
commit @browser
  input.checked := true
```
### Maintain #difficulty-changed
```
search @event @browser
  [#change element: [#input name: "difficulty"]]
commit
  [#difficulty-changed]
```
```
search @session @event @browser
  game = [#game screen: "settings"]
  [#click element: [#button]]
  difficulty-changed = [#difficulty-changed]
commit
  difficulty-changed :=
```
### Draw custom difficulty subpanel
```
search @session @browser
  [#game screen: "settings" board: [#board mines width height]]
  [#input difficulty checked: true]
  difficulty = [#difficulty name: "Custom"]
  settings = [#div class: "settings"]
bind @browser
  settings.children +=
    [#fieldset sort: 2 class: "custom-container" children:
      [#legend text: "Custom"]
      [#div children:
        [#label text: "Width" for: "width"] [#input name: "width" type: "number" min: "1" value: width]]
      [#div children:
        [#label text: "Height" for: "height"] [#input name: "height" type: "number" min: "1" value: height]]
      [#div children:
        [#label text: "Mines" for: "mines"] [#input name: "mines" type: "number" min: "1" value: mines]]]
```
### Settings screen => board screen
```
search @session @event @browser
  game = [#game screen: "settings"]
  [#click element: [#button]]
commit
  game.screen := "board"
```
### Applying ready settings
```
search @session @event @browser
  [#click element: [#apply-button]]
  [#input difficulty checked: true]
  difficulty = [#difficulty mines width height]
  [#game board]
commit
  board.mines := mines
  board.width := width
  board.height := height
  board.difficulty := difficulty
bind @event
  [#restart-game]
```
### Applying custom settings
```
search @session @event @browser
  [#click element: [#apply-button]]
  [#input difficulty checked: true]
  difficulty = [#difficulty name: "Custom"]
  [#input name: "mines" value: mines]
  [#input name: "width" value: width]
  [#input name: "height" value: height]
  [#game board]
commit
  board.mines := mines
  board.width := width
  board.height := height
  board.difficulty := difficulty
bind @event
  [#restart-game]
```
## Utilities
The following utilities are essentially reusable and could live in a separate
library.

### Toggle tag
```
search
  [#toggle-tag on tag']
  on.tag = tag'
commit
  on.tag -= tag'
```
```
search
  [#toggle-tag on tag']
  not(on.tag = tag')
commit
  on.tag += tag'
```
### Track key state
```
search @session @event
  [#track-key-state key]
  [#keydown key]
commit
  [#keypressed key]
```
```
search @session @event
  [#track-key-state key]
  [#keyup key]
  keypressed = [#keypressed key]
commit
  keypressed := none
```
## CSS
```
commit @browser
  [#style text:
    // Generic
    ".outset {" +
      "border: 2px solid;" +
      "border-color: white gray gray white;" +
      "background-color: silver;" +
    "}" +
    ".inset {" +
      "border: 2px solid;" +
      "border-color: gray white white gray;" +
      "background-color: silver;" +
    "}" +
    ".flat {" +
      "border: 1px solid gray;" +
      "border-width: 1px 0 0 1px;" +
      "background-color: silver;" +
    "}" +
    // Game container
    ".board-container {" +
      "-webkit-user-select: none;" +
      "-ms-user-select: none;" +
      "-moz-user-select: none;" +
      "user-select: none;" +
      "text-align: center;" +
      "display: flex;" +
      "flex-direction: column;" +
      "align-items: center;" +
      "align-self: flex-start;" +
    "}" +
    ".board-container > * {" +
      "flex-shrink: 0;" +
    "}" +
    // Top status
    ".big-btn {" +
      "width: 24px;" +
      "height: 24px;" +
      "padding: 0;" +
      "text-align: center;" +
      "font-size: 18px;" +
      "color: black;" +
    "}" +
    ".meter {" +
      "width: 40px;" +
      "height: 24px;" +
      "padding: 0;" +
      "text-align: center;" +
      "font-size: 18px;" +
      "font-family: monospace;" +
      "background-color: maroon;" +
      "color: red;" +
    "}" +
    ".status-panel {" +
      "display: inline-flex;" +
      "justify-content: space-between;" +
    "}" +
    ".status-panel > * {" +
      "flex-shrink: 0;" +
      "display: inline-block;" +
    "}" +
    // Setting screen
    ".settings {" +
      "text-align: center;" +
    "}" +
    ".settings > * {" +
      "text-align: left;" +
    "}" +
    ".settings > fieldset {" +
      "margin: 10px;" +
      "display: inline-block;" +
    "}" +
    "fieldset.custom-container > div > * {" +
      "display: inline-block;" +
      "width: 4em;" +
    "}" +
    "fieldset.custom-container > input {" +
      "text-align: right;" +
    "}" +
    ".button-group {" +
      "width: 100%;" +
      "display: flex;" +
      "padding: 10px;" +
      "justify-content: space-around;" +
    "}"
    ]
```
## Todo
 * Use external style sheet
 * Timer
 * Best times
 * O-face
